package org.apache.iotdb.db.index.preprocess;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.List;
import org.apache.iotdb.db.exception.index.IndexRuntimeException;
import org.apache.iotdb.db.rescon.TVListAllocator;
import org.apache.iotdb.db.utils.datastructure.TVList;
import org.apache.iotdb.tsfile.exception.NotImplementedException;
import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;
import org.apache.iotdb.tsfile.read.common.BatchData;
import org.apache.iotdb.tsfile.read.filter.basic.Filter;
import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;

public abstract class SubMatchFeatureExtractor extends IndexFeatureExtractor {

  /**
   * The time series will be divided into multiple chunks, but the sliding window moves step by
   * step, so the window across the adjacent two chunks will be cut off. In addition to the current
   * {@code srcData}, the preprocessor may also have "previous". As a result, the time range of some
   * slices generated by the preprocessor might be a little earlier than the range of {@code
   * srcData}.
   */
  protected TVList srcData;

  public SubMatchFeatureExtractor(TSDataType dataType,
      boolean inQueryMode) {
    super(dataType, inQueryMode);
    this.srcData = TVListAllocator.getInstance().allocate(dataType);
  }

  public void appendNewSrcData(TVList newData) {
    TVList.append(this.srcData, newData, 0, newData.size());
    initParams();
  }

  public void appendNewSrcData(BatchData newData) {
    TVList.appendAll(this.srcData, newData);
    initParams();
  }

  protected abstract void initParams();

  /**
   * Returns true if the pre-processor has more elements. i.e., return true if {@link #processNext}
   * would process the next data item rather than throwing an exception.)
   *
   * <p>If there are more sequences, most {@code currentStartTime} and {@code currentEndTime} to
   * the next one. Otherwise, don't change them.
   *
   * @return {@code true} if there are more elements to be processed.
   */
  public abstract boolean hasNext(Filter timeFilter);

  public boolean hasNext() {
    return hasNext(null);
  }

  /**
   * After a calling of {@linkplain #processNext()}, currentStartTime and currentStartIdx has been
   * updated. This method is to calculate the start idx of the next window
   */
  protected abstract int nextUnprocessedWindowStartIdx();

  /**
   * clear data which has been processed
   */
  public void clearProcessedSrcData() {
    int idx = nextUnprocessedWindowStartIdx();
    if (idx > srcData.size()) {
      throw new IndexRuntimeException(
          String.format("idx %d > srcData.size %d", idx, srcData.size()));
    }
    TVList swap = TVListAllocator.getInstance().allocate(srcData.getDataType());
    TVList.append(swap, this.srcData, idx, srcData.size() - idx);
    TVListAllocator.getInstance().release(srcData);
    this.srcData = swap;
  }


  /**
   * Not that, this method will remove all data and feature. If this method is called, all other
   * methods will be invalid like {@linkplain #serializePrevious()} and {@linkplain #processNext()}
   */
  public ByteBuffer closeAndRelease() throws IOException {
    ByteBuffer res = serializePrevious();
    clear();
    TVListAllocator.getInstance().release(srcData);
    return res;
  }

  /**
   * get the latest N of L2 aligned sequences, including the current one. The caller needs to
   * release them after use.
   */
  public abstract List<Object> getLatestN_L2_AlignedSequences(int latestN);

  /**
   * get current L2 aligned sequences. The caller needs to release them after use.
   */
  public Object getCurrent_L2_AlignedSequence() {
    List<Object> res = getLatestN_L2_AlignedSequences(1);
    return res.isEmpty() ? null : res.get(0);
  }


  /**
   * get the latest N of L3 Features.
   *
   * @throws NotImplementedException Not all preprocessors support L3 features.
   */
  public List<Object> getLatestN_L3_Features(int latestN) {
    throw new NotImplementedException("This preprocessor doesn't support L3 feature");
  }

  /**
   * get the current L3 Features.
   *
   * @throws NotImplementedException Not all preprocessors support L3 features.
   */
  public Object getCurrent_L3_Feature() {
    List<Object> res = getLatestN_L3_Features(1);
    return res.isEmpty() ? null : res.get(0);
  }


  /**
   * deserialize from the buffer, set the previous overlapped data
   */
  public void deserializePrevious(ByteBuffer byteBuffer) {
    if (byteBuffer == null) {
      return;
    }
    srcData.clear();
    TSDataType dataType = TSDataType.deserialize(ReadWriteIOUtils.readByte(byteBuffer));
    if (dataType != srcData.getDataType()) {
      throw new IndexRuntimeException(
          String.format(
              "serialized dataType %s != srcData dataType %s", dataType, srcData.getDataType()));
    }
    int len = ReadWriteIOUtils.readInt(byteBuffer);
    for (int i = 0; i < len; i++) {
      long time = ReadWriteIOUtils.readLong(byteBuffer);
      switch (srcData.getDataType()) {
        case BOOLEAN:
          srcData.putBoolean(time, ReadWriteIOUtils.readBool(byteBuffer));
          break;
        case INT32:
          srcData.putInt(time, ReadWriteIOUtils.readInt(byteBuffer));
          break;
        case INT64:
          srcData.putLong(time, ReadWriteIOUtils.readLong(byteBuffer));
          break;
        case FLOAT:
          srcData.putFloat(time, ReadWriteIOUtils.readFloat(byteBuffer));
          break;
        case DOUBLE:
          srcData.putDouble(time, ReadWriteIOUtils.readDouble(byteBuffer));
          break;
        case TEXT:
          srcData.putBinary(time, ReadWriteIOUtils.readBinary(byteBuffer));
          break;
      }
    }
  }

  /**
   * serialize the previous overlapped data and output
   */
  public ByteBuffer serializePrevious() throws IOException {
    int idx = 0;
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    ReadWriteIOUtils.write(srcData.getDataType().serialize(), baos);
    ReadWriteIOUtils.write(srcData.size() - idx, baos);
    for (int i = idx; i < srcData.size(); i++) {
      ReadWriteIOUtils.write(srcData.getTime(i), baos);
      switch (srcData.getDataType()) {
        case BOOLEAN:
          ReadWriteIOUtils.write(srcData.getBoolean(i), baos);
          break;
        case INT32:
          ReadWriteIOUtils.write(srcData.getInt(i), baos);
          break;
        case INT64:
          ReadWriteIOUtils.write(srcData.getLong(i), baos);
          break;
        case FLOAT:
          ReadWriteIOUtils.write(srcData.getFloat(i), baos);
          break;
        case DOUBLE:
          ReadWriteIOUtils.write(srcData.getDouble(i), baos);
          break;
        case TEXT:
          ReadWriteIOUtils.write(srcData.getBinary(i), baos);
          break;
      }
    }
    byte[] array = baos.toByteArray();
    ByteBuffer byteBuffer = ByteBuffer.allocate(array.length);
    byteBuffer.put(array);
    byteBuffer.flip();
    return byteBuffer;
  }
}
